syntax = "proto3";
package oracle.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/MinterTeam/mhub2/module/x/oracle/types";

// ClaimType is the cosmos type of an event from the counterpart chain that can
// be handled
enum ClaimType {
  option (gogoproto.goproto_enum_prefix) = false;

  CLAIM_TYPE_UNKNOWN  = 0 [(gogoproto.enumvalue_customname) = "CLAIM_TYPE_UNKNOWN" ];
  CLAIM_TYPE_PRICE    = 1 [(gogoproto.enumvalue_customname) = "CLAIM_TYPE_PRICE" ];
  CLAIM_TYPE_HOLDER   = 2 [(gogoproto.enumvalue_customname) = "CLAIM_TYPE_HOLDER" ];
}

// Attestation is an aggregate of `claims` that eventually becomes `observed` by
// all orchestrators
// EVENT_NONCE:
// EventNonce a nonce provided by the peggy contract that is unique per event fired
// These event nonces must be relayed in order. This is a correctness issue,
// if relaying out of order transaction replay attacks become possible
// OBSERVED:
// Observed indicates that >67% of validators have attested to the event,
// and that the event should be executed by the peggy state machine
//
// The actual content of the claims is passed in with the transaction making the claim
// and then passed through the call stack alongside the attestation while it is processed
// the key in which the attestation is stored is keyed on the exact details of the claim
// but there is no reason to store those exact details becuause the next message sender
// will kindly provide you with them.
message Attestation {
  uint64              epoch = 1;
  bool                observed    = 2;
  repeated string     votes       = 3;
  bytes               claim_hash  = 4;
  uint64              height      = 5;
}
