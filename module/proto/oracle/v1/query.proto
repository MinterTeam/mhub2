syntax = "proto3";
package oracle.v1;

import "google/api/annotations.proto";
import "oracle/v1/types.proto";
import "oracle/v1/prices.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/MinterTeam/mhub2/module/x/oracle/types";

// Query defines the gRPC querier service
service Query {
    rpc CurrentEpoch(QueryCurrentEpochRequest) returns(QueryCurrentEpochResponse) {
        option (google.api.http).get = "/oracle/v1/epoch/current";
    }
    rpc EthFee(QueryEthFeeRequest) returns(QueryEthFeeResponse) {
        option (google.api.http).get = "/oracle/v1/ethereum_fee";
    }
    rpc BscFee(QueryBscFeeRequest) returns(QueryBscFeeResponse) {
        option (google.api.http).get = "/oracle/v1/bsc_fee";
    }
    rpc Prices(QueryPricesRequest) returns(QueryPricesResponse) {
        option (google.api.http).get = "/oracle/v1/prices";
    }
    rpc Holders(QueryHoldersRequest) returns(QueryHoldersResponse) {
         option (google.api.http).get = "/oracle/v1/holders";
    }
}

message QueryCurrentEpochRequest {}
message QueryCurrentEpochResponse { Epoch epoch = 1; }

message QueryPricesRequest {}
message QueryPricesResponse { Prices prices = 1; }

message QueryHoldersRequest {}
message QueryHoldersResponse { Holders holders = 1; }

message QueryEthFeeRequest {}
message QueryEthFeeResponse {
    string min = 1 [
                      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
                      (gogoproto.nullable) = false
                     ];
    string fast = 2 [
                   (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
                   (gogoproto.nullable) = false
                   ];
}

message QueryBscFeeRequest {}
message QueryBscFeeResponse {
    string min = 1 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable) = false
    ];
    string fast = 2 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable) = false
    ];
}