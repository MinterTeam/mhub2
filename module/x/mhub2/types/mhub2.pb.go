// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mhub2/v1/mhub2.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/regen-network/cosmos-proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxStatusType int32

const (
	TX_STATUS_NOT_FOUND        TxStatusType = 0
	TX_STATUS_DEPOSIT_RECEIVED TxStatusType = 1
	TX_STATUS_BATCH_CREATED    TxStatusType = 2
	TX_STATUS_BATCH_EXECUTED   TxStatusType = 3
	TX_STATUS_REFUNDED         TxStatusType = 4
)

var TxStatusType_name = map[int32]string{
	0: "TX_STATUS_NOT_FOUND",
	1: "TX_STATUS_DEPOSIT_RECEIVED",
	2: "TX_STATUS_BATCH_CREATED",
	3: "TX_STATUS_BATCH_EXECUTED",
	4: "TX_STATUS_REFUNDED",
}

var TxStatusType_value = map[string]int32{
	"TX_STATUS_NOT_FOUND":        0,
	"TX_STATUS_DEPOSIT_RECEIVED": 1,
	"TX_STATUS_BATCH_CREATED":    2,
	"TX_STATUS_BATCH_EXECUTED":   3,
	"TX_STATUS_REFUNDED":         4,
}

func (x TxStatusType) String() string {
	return proto.EnumName(TxStatusType_name, int32(x))
}

func (TxStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{0}
}

// ExternalEventVoteRecord is an event that is pending of confirmation by 2/3 of
// the signer set. The event is then attested and executed in the state machine
// once the required threshold is met.
type ExternalEventVoteRecord struct {
	Event    *types.Any `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Votes    []string   `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
	Accepted bool       `protobuf:"varint,3,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (m *ExternalEventVoteRecord) Reset()         { *m = ExternalEventVoteRecord{} }
func (m *ExternalEventVoteRecord) String() string { return proto.CompactTextString(m) }
func (*ExternalEventVoteRecord) ProtoMessage()    {}
func (*ExternalEventVoteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{0}
}
func (m *ExternalEventVoteRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalEventVoteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalEventVoteRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalEventVoteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalEventVoteRecord.Merge(m, src)
}
func (m *ExternalEventVoteRecord) XXX_Size() int {
	return m.Size()
}
func (m *ExternalEventVoteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalEventVoteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalEventVoteRecord proto.InternalMessageInfo

func (m *ExternalEventVoteRecord) GetEvent() *types.Any {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ExternalEventVoteRecord) GetVotes() []string {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *ExternalEventVoteRecord) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

// LatestBlockHeight defines the latest observed external block height
// and the corresponding timestamp value in nanoseconds.
type LatestBlockHeight struct {
	ExternalHeight uint64 `protobuf:"varint,1,opt,name=external_height,json=externalHeight,proto3" json:"external_height,omitempty"`
	CosmosHeight   uint64 `protobuf:"varint,2,opt,name=cosmos_height,json=cosmosHeight,proto3" json:"cosmos_height,omitempty"`
}

func (m *LatestBlockHeight) Reset()         { *m = LatestBlockHeight{} }
func (m *LatestBlockHeight) String() string { return proto.CompactTextString(m) }
func (*LatestBlockHeight) ProtoMessage()    {}
func (*LatestBlockHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{1}
}
func (m *LatestBlockHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestBlockHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestBlockHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestBlockHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestBlockHeight.Merge(m, src)
}
func (m *LatestBlockHeight) XXX_Size() int {
	return m.Size()
}
func (m *LatestBlockHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestBlockHeight.DiscardUnknown(m)
}

var xxx_messageInfo_LatestBlockHeight proto.InternalMessageInfo

func (m *LatestBlockHeight) GetExternalHeight() uint64 {
	if m != nil {
		return m.ExternalHeight
	}
	return 0
}

func (m *LatestBlockHeight) GetCosmosHeight() uint64 {
	if m != nil {
		return m.CosmosHeight
	}
	return 0
}

// ExternalSigner represents a cosmos validator with its corresponding bridge
// operator address and its staking consensus power.
type ExternalSigner struct {
	Power           uint64 `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
	ExternalAddress string `protobuf:"bytes,2,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
}

func (m *ExternalSigner) Reset()         { *m = ExternalSigner{} }
func (m *ExternalSigner) String() string { return proto.CompactTextString(m) }
func (*ExternalSigner) ProtoMessage()    {}
func (*ExternalSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{2}
}
func (m *ExternalSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalSigner.Merge(m, src)
}
func (m *ExternalSigner) XXX_Size() int {
	return m.Size()
}
func (m *ExternalSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalSigner.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalSigner proto.InternalMessageInfo

func (m *ExternalSigner) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *ExternalSigner) GetExternalAddress() string {
	if m != nil {
		return m.ExternalAddress
	}
	return ""
}

// SignerSetTx is the Bridge multisig set that relays
// transactions the two chains. The staking validators keep external keys which
// are used to check signatures in order to get significant gas
// savings.
type SignerSetTx struct {
	Nonce    uint64          `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Height   uint64          `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Signers  ExternalSigners `protobuf:"bytes,3,rep,name=signers,proto3,castrepeated=ExternalSigners" json:"signers,omitempty"`
	Sequence uint64          `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *SignerSetTx) Reset()         { *m = SignerSetTx{} }
func (m *SignerSetTx) String() string { return proto.CompactTextString(m) }
func (*SignerSetTx) ProtoMessage()    {}
func (*SignerSetTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{3}
}
func (m *SignerSetTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTx.Merge(m, src)
}
func (m *SignerSetTx) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTx) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTx.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTx proto.InternalMessageInfo

func (m *SignerSetTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SignerSetTx) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SignerSetTx) GetSigners() ExternalSigners {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *SignerSetTx) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// BatchTx represents a batch of transactions going from Cosmos to External Chain.
// Batch txs are are identified by a unique hash and the token contract that is
// shared by all the SendToExternal
type BatchTx struct {
	BatchNonce      uint64            `protobuf:"varint,1,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	Timeout         uint64            `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Transactions    []*SendToExternal `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	ExternalTokenId string            `protobuf:"bytes,4,opt,name=external_token_id,json=externalTokenId,proto3" json:"external_token_id,omitempty"`
	Height          uint64            `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Sequence        uint64            `protobuf:"varint,6,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *BatchTx) Reset()         { *m = BatchTx{} }
func (m *BatchTx) String() string { return proto.CompactTextString(m) }
func (*BatchTx) ProtoMessage()    {}
func (*BatchTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{4}
}
func (m *BatchTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTx.Merge(m, src)
}
func (m *BatchTx) XXX_Size() int {
	return m.Size()
}
func (m *BatchTx) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTx.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTx proto.InternalMessageInfo

func (m *BatchTx) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *BatchTx) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *BatchTx) GetTransactions() []*SendToExternal {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *BatchTx) GetExternalTokenId() string {
	if m != nil {
		return m.ExternalTokenId
	}
	return ""
}

func (m *BatchTx) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BatchTx) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// SendToExternal represents an individual SendToExternal from Cosmos to
// External chain
type SendToExternal struct {
	Id                uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender            string        `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	ExternalRecipient string        `protobuf:"bytes,3,opt,name=external_recipient,json=externalRecipient,proto3" json:"external_recipient,omitempty"`
	ChainId           string        `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Token             ExternalToken `protobuf:"bytes,5,opt,name=token,proto3" json:"token"`
	Fee               ExternalToken `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee"`
	TxHash            string        `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ValCommission     ExternalToken `protobuf:"bytes,8,opt,name=val_commission,json=valCommission,proto3" json:"val_commission"`
}

func (m *SendToExternal) Reset()         { *m = SendToExternal{} }
func (m *SendToExternal) String() string { return proto.CompactTextString(m) }
func (*SendToExternal) ProtoMessage()    {}
func (*SendToExternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{5}
}
func (m *SendToExternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendToExternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendToExternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendToExternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToExternal.Merge(m, src)
}
func (m *SendToExternal) XXX_Size() int {
	return m.Size()
}
func (m *SendToExternal) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToExternal.DiscardUnknown(m)
}

var xxx_messageInfo_SendToExternal proto.InternalMessageInfo

func (m *SendToExternal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendToExternal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SendToExternal) GetExternalRecipient() string {
	if m != nil {
		return m.ExternalRecipient
	}
	return ""
}

func (m *SendToExternal) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SendToExternal) GetToken() ExternalToken {
	if m != nil {
		return m.Token
	}
	return ExternalToken{}
}

func (m *SendToExternal) GetFee() ExternalToken {
	if m != nil {
		return m.Fee
	}
	return ExternalToken{}
}

func (m *SendToExternal) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *SendToExternal) GetValCommission() ExternalToken {
	if m != nil {
		return m.ValCommission
	}
	return ExternalToken{}
}

// ContractCallTx represents an individual arbitrary logic call transaction
// from Cosmos to External.
type ContractCallTx struct {
	InvalidationNonce uint64                                               `protobuf:"varint,1,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	InvalidationScope github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=invalidation_scope,json=invalidationScope,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"invalidation_scope,omitempty"`
	Address           string                                               `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Payload           []byte                                               `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Timeout           uint64                                               `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Tokens            []ExternalToken                                      `protobuf:"bytes,6,rep,name=tokens,proto3" json:"tokens"`
	Fees              []ExternalToken                                      `protobuf:"bytes,7,rep,name=fees,proto3" json:"fees"`
	Height            uint64                                               `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	Sequence          uint64                                               `protobuf:"varint,9,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *ContractCallTx) Reset()         { *m = ContractCallTx{} }
func (m *ContractCallTx) String() string { return proto.CompactTextString(m) }
func (*ContractCallTx) ProtoMessage()    {}
func (*ContractCallTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{6}
}
func (m *ContractCallTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallTx.Merge(m, src)
}
func (m *ContractCallTx) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallTx) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallTx.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallTx proto.InternalMessageInfo

func (m *ContractCallTx) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *ContractCallTx) GetInvalidationScope() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.InvalidationScope
	}
	return nil
}

func (m *ContractCallTx) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ContractCallTx) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ContractCallTx) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ContractCallTx) GetTokens() []ExternalToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *ContractCallTx) GetFees() []ExternalToken {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *ContractCallTx) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ContractCallTx) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type ExternalToken struct {
	TokenId         uint64                                 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	ExternalTokenId string                                 `protobuf:"bytes,2,opt,name=external_token_id,json=externalTokenId,proto3" json:"external_token_id,omitempty"`
	Amount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *ExternalToken) Reset()         { *m = ExternalToken{} }
func (m *ExternalToken) String() string { return proto.CompactTextString(m) }
func (*ExternalToken) ProtoMessage()    {}
func (*ExternalToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{7}
}
func (m *ExternalToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalToken.Merge(m, src)
}
func (m *ExternalToken) XXX_Size() int {
	return m.Size()
}
func (m *ExternalToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalToken.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalToken proto.InternalMessageInfo

func (m *ExternalToken) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *ExternalToken) GetExternalTokenId() string {
	if m != nil {
		return m.ExternalTokenId
	}
	return ""
}

type TokenInfo struct {
	Id               uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Denom            string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ChainId          string                                 `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ExternalTokenId  string                                 `protobuf:"bytes,4,opt,name=external_token_id,json=externalTokenId,proto3" json:"external_token_id,omitempty"`
	ExternalDecimals uint64                                 `protobuf:"varint,5,opt,name=external_decimals,json=externalDecimals,proto3" json:"external_decimals,omitempty"`
	Commission       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=commission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{8}
}
func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TokenInfo) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TokenInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *TokenInfo) GetExternalTokenId() string {
	if m != nil {
		return m.ExternalTokenId
	}
	return ""
}

func (m *TokenInfo) GetExternalDecimals() uint64 {
	if m != nil {
		return m.ExternalDecimals
	}
	return 0
}

type TokenInfos struct {
	TokenInfos []*TokenInfo `protobuf:"bytes,1,rep,name=token_infos,json=tokenInfos,proto3" json:"token_infos,omitempty"`
}

func (m *TokenInfos) Reset()         { *m = TokenInfos{} }
func (m *TokenInfos) String() string { return proto.CompactTextString(m) }
func (*TokenInfos) ProtoMessage()    {}
func (*TokenInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{9}
}
func (m *TokenInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfos.Merge(m, src)
}
func (m *TokenInfos) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfos.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfos proto.InternalMessageInfo

func (m *TokenInfos) GetTokenInfos() []*TokenInfo {
	if m != nil {
		return m.TokenInfos
	}
	return nil
}

type IDSet struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *IDSet) Reset()         { *m = IDSet{} }
func (m *IDSet) String() string { return proto.CompactTextString(m) }
func (*IDSet) ProtoMessage()    {}
func (*IDSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{10}
}
func (m *IDSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDSet.Merge(m, src)
}
func (m *IDSet) XXX_Size() int {
	return m.Size()
}
func (m *IDSet) XXX_DiscardUnknown() {
	xxx_messageInfo_IDSet.DiscardUnknown(m)
}

var xxx_messageInfo_IDSet proto.InternalMessageInfo

func (m *IDSet) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type TxStatus struct {
	InTxHash  string       `protobuf:"bytes,1,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash"`
	OutTxHash string       `protobuf:"bytes,2,opt,name=out_tx_hash,json=outTxHash,proto3" json:"out_tx_hash"`
	Status    TxStatusType `protobuf:"varint,3,opt,name=status,proto3,enum=mhub2.v1.TxStatusType" json:"status"`
}

func (m *TxStatus) Reset()         { *m = TxStatus{} }
func (m *TxStatus) String() string { return proto.CompactTextString(m) }
func (*TxStatus) ProtoMessage()    {}
func (*TxStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e98aa13e7c3fc003, []int{11}
}
func (m *TxStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxStatus.Merge(m, src)
}
func (m *TxStatus) XXX_Size() int {
	return m.Size()
}
func (m *TxStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TxStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TxStatus proto.InternalMessageInfo

func (m *TxStatus) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *TxStatus) GetOutTxHash() string {
	if m != nil {
		return m.OutTxHash
	}
	return ""
}

func (m *TxStatus) GetStatus() TxStatusType {
	if m != nil {
		return m.Status
	}
	return TX_STATUS_NOT_FOUND
}

func init() {
	proto.RegisterEnum("mhub2.v1.TxStatusType", TxStatusType_name, TxStatusType_value)
	proto.RegisterType((*ExternalEventVoteRecord)(nil), "mhub2.v1.ExternalEventVoteRecord")
	proto.RegisterType((*LatestBlockHeight)(nil), "mhub2.v1.LatestBlockHeight")
	proto.RegisterType((*ExternalSigner)(nil), "mhub2.v1.ExternalSigner")
	proto.RegisterType((*SignerSetTx)(nil), "mhub2.v1.SignerSetTx")
	proto.RegisterType((*BatchTx)(nil), "mhub2.v1.BatchTx")
	proto.RegisterType((*SendToExternal)(nil), "mhub2.v1.SendToExternal")
	proto.RegisterType((*ContractCallTx)(nil), "mhub2.v1.ContractCallTx")
	proto.RegisterType((*ExternalToken)(nil), "mhub2.v1.ExternalToken")
	proto.RegisterType((*TokenInfo)(nil), "mhub2.v1.TokenInfo")
	proto.RegisterType((*TokenInfos)(nil), "mhub2.v1.TokenInfos")
	proto.RegisterType((*IDSet)(nil), "mhub2.v1.IDSet")
	proto.RegisterType((*TxStatus)(nil), "mhub2.v1.TxStatus")
}

func init() { proto.RegisterFile("mhub2/v1/mhub2.proto", fileDescriptor_e98aa13e7c3fc003) }

var fileDescriptor_e98aa13e7c3fc003 = []byte{
	// 1222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0xfa, 0x77, 0x9e, 0x13, 0x37, 0x99, 0x46, 0x8d, 0xe3, 0xef, 0x57, 0xb6, 0x65, 0x24,
	0x08, 0x85, 0x7a, 0x9b, 0xb4, 0x48, 0x55, 0x05, 0x48, 0x59, 0xdb, 0x25, 0x41, 0x90, 0xc2, 0x7a,
	0x53, 0x55, 0x5c, 0xac, 0xf1, 0xee, 0xc4, 0x5e, 0xd5, 0xbb, 0x63, 0x3c, 0x63, 0xe3, 0xfc, 0x07,
	0x28, 0x27, 0x0e, 0x5c, 0x83, 0x90, 0x10, 0x17, 0xc4, 0x91, 0xff, 0x81, 0x8a, 0x53, 0x8f, 0x88,
	0x43, 0x40, 0xe9, 0xad, 0x77, 0x2e, 0x9c, 0xd0, 0xce, 0xcc, 0x6e, 0x76, 0xd3, 0x94, 0xb6, 0xa7,
	0xcc, 0x7b, 0xef, 0xf3, 0xde, 0x7c, 0xde, 0xbc, 0xcf, 0xdb, 0x18, 0xd6, 0xbc, 0xe1, 0xb4, 0xbf,
	0xad, 0xcf, 0xb6, 0x74, 0x71, 0x68, 0x8e, 0x27, 0x94, 0x53, 0x54, 0x90, 0xc6, 0x6c, 0xab, 0xb2,
	0x61, 0x53, 0xe6, 0x51, 0xd6, 0x13, 0x7e, 0x5d, 0x1a, 0x12, 0x54, 0xa9, 0x0d, 0x28, 0x1d, 0x8c,
	0x88, 0x2e, 0xac, 0xfe, 0xf4, 0x50, 0xe7, 0xae, 0x47, 0x18, 0xc7, 0xde, 0x58, 0x01, 0xd6, 0x06,
	0x74, 0x40, 0x65, 0x62, 0x70, 0x52, 0xde, 0xaa, 0x2c, 0xa2, 0xf7, 0x31, 0x23, 0xfa, 0x6c, 0xab,
	0x4f, 0x38, 0xde, 0xd2, 0x6d, 0xea, 0xfa, 0x2a, 0xbe, 0x71, 0xb1, 0x2c, 0xf6, 0x8f, 0x64, 0xa8,
	0x71, 0xac, 0xc1, 0x7a, 0x67, 0xce, 0xc9, 0xc4, 0xc7, 0xa3, 0xce, 0x8c, 0xf8, 0xfc, 0x01, 0xe5,
	0xc4, 0x24, 0x36, 0x9d, 0x38, 0xe8, 0x03, 0xc8, 0x92, 0xc0, 0x55, 0xd6, 0xea, 0xda, 0x66, 0x71,
	0x7b, 0xad, 0x29, 0xcb, 0x34, 0xc3, 0x32, 0xcd, 0x1d, 0xff, 0xc8, 0x58, 0xfd, 0xed, 0x97, 0x1b,
	0xcb, 0x89, 0x0a, 0xa6, 0xcc, 0x42, 0x6b, 0x90, 0x9d, 0x51, 0x4e, 0x58, 0x39, 0x55, 0x4f, 0x6f,
	0x2e, 0x9a, 0xd2, 0x40, 0x15, 0x28, 0x60, 0xdb, 0x26, 0x63, 0x4e, 0x9c, 0x72, 0xba, 0xae, 0x6d,
	0x16, 0xcc, 0xc8, 0x6e, 0x60, 0x58, 0xfd, 0x04, 0x73, 0xc2, 0xb8, 0x31, 0xa2, 0xf6, 0xa3, 0x5d,
	0xe2, 0x0e, 0x86, 0x1c, 0xbd, 0x05, 0x57, 0x88, 0x2a, 0xdf, 0x1b, 0x0a, 0x97, 0xe0, 0x93, 0x31,
	0x4b, 0xa1, 0x5b, 0x01, 0xdf, 0x80, 0x65, 0xf5, 0xb2, 0x0a, 0x96, 0x12, 0xb0, 0x25, 0xe9, 0x94,
	0xa0, 0xc6, 0xe7, 0x50, 0x0a, 0xc9, 0x76, 0xdd, 0x81, 0x4f, 0x26, 0x01, 0xcd, 0x31, 0xfd, 0x8a,
	0x4c, 0x54, 0x55, 0x69, 0xa0, 0xb7, 0x61, 0x25, 0xba, 0x15, 0x3b, 0xce, 0x84, 0x30, 0x26, 0xea,
	0x2d, 0x9a, 0x11, 0x9b, 0x1d, 0xe9, 0x6e, 0x7c, 0xaf, 0x41, 0x51, 0xd6, 0xea, 0x12, 0x6e, 0xcd,
	0x83, 0x82, 0x3e, 0xf5, 0x6d, 0x12, 0x16, 0x14, 0x06, 0xba, 0x06, 0xb9, 0x04, 0x2d, 0x65, 0xa1,
	0x8f, 0x20, 0xcf, 0x44, 0x32, 0x2b, 0xa7, 0xeb, 0xe9, 0xcd, 0xe2, 0x76, 0xb9, 0x19, 0x2a, 0xa5,
	0x99, 0x64, 0x6a, 0x5c, 0xfd, 0xe9, 0xcf, 0xda, 0x95, 0xa4, 0x8f, 0x99, 0x61, 0x76, 0xf0, 0xb0,
	0x8c, 0x7c, 0x39, 0x25, 0xc1, 0xcd, 0x19, 0x71, 0x45, 0x64, 0x37, 0xce, 0x34, 0xc8, 0x1b, 0x98,
	0xdb, 0x43, 0x6b, 0x8e, 0x6a, 0x50, 0xec, 0x07, 0xc7, 0x5e, 0x9c, 0x24, 0x08, 0xd7, 0xbe, 0x60,
	0x5a, 0x86, 0x7c, 0x20, 0x3b, 0x3a, 0x0d, 0xa9, 0x86, 0x26, 0x7a, 0x1f, 0x96, 0xf8, 0x04, 0xfb,
	0x0c, 0xdb, 0xdc, 0xa5, 0xfe, 0x25, 0x84, 0xbb, 0xc4, 0x77, 0x2c, 0x1a, 0x52, 0x34, 0x13, 0x68,
	0x74, 0x1d, 0x56, 0xa3, 0x27, 0xe5, 0xf4, 0x11, 0xf1, 0x7b, 0xae, 0x23, 0x98, 0xc6, 0xde, 0xd4,
	0x0a, 0xfc, 0x7b, 0x4e, 0xec, 0xb5, 0xb2, 0x89, 0xd7, 0x8a, 0x37, 0x99, 0xbb, 0xd0, 0xe4, 0xaf,
	0x29, 0x28, 0x25, 0x09, 0xa0, 0x12, 0xa4, 0x5c, 0x47, 0xb5, 0x98, 0x72, 0x45, 0x59, 0x46, 0x7c,
	0x87, 0x4c, 0xd4, 0x2c, 0x95, 0x85, 0x6e, 0x00, 0x8a, 0xa8, 0x4d, 0x88, 0xed, 0x8e, 0xdd, 0x40,
	0xf6, 0x69, 0x81, 0x89, 0x48, 0x9b, 0x61, 0x00, 0x6d, 0x40, 0xc1, 0x1e, 0x62, 0x37, 0xd6, 0x40,
	0x5e, 0xd8, 0x7b, 0x0e, 0xba, 0x05, 0x59, 0xd1, 0x9b, 0xe0, 0x5d, 0xdc, 0x5e, 0x7f, 0x7e, 0x98,
	0xa2, 0x45, 0x23, 0xf3, 0xf8, 0xb4, 0xb6, 0x60, 0x4a, 0x2c, 0xd2, 0x21, 0x7d, 0x48, 0x64, 0x43,
	0x2f, 0x4d, 0x09, 0x90, 0x68, 0x1d, 0xf2, 0x7c, 0xde, 0x1b, 0x62, 0x36, 0x2c, 0xe7, 0x65, 0x23,
	0x7c, 0xbe, 0x8b, 0xd9, 0x10, 0xb5, 0xa1, 0x34, 0xc3, 0xa3, 0x9e, 0x4d, 0x3d, 0xcf, 0x65, 0xcc,
	0xa5, 0x7e, 0xb9, 0xf0, 0x2a, 0x45, 0x97, 0x67, 0x78, 0xd4, 0x8a, 0x72, 0x1a, 0xdf, 0xa6, 0xa1,
	0xd4, 0xa2, 0x3e, 0x9f, 0x60, 0x9b, 0xb7, 0xf0, 0x68, 0x64, 0xcd, 0x83, 0x17, 0x72, 0xfd, 0x19,
	0x1e, 0xb9, 0x0e, 0x0e, 0xa6, 0x99, 0x10, 0xcf, 0x6a, 0x3c, 0x22, 0x35, 0x34, 0xb8, 0x00, 0x67,
	0x36, 0x1d, 0x13, 0xf1, 0xe8, 0x4b, 0xc6, 0x9d, 0x7f, 0x4e, 0x6b, 0xb7, 0x07, 0x2e, 0x1f, 0x4e,
	0xfb, 0x4d, 0x9b, 0x7a, 0x3a, 0x17, 0x33, 0xf0, 0x5c, 0x9f, 0xc7, 0x8f, 0x23, 0xb7, 0xcf, 0xf4,
	0xfe, 0x11, 0x27, 0xac, 0xb9, 0x4b, 0xe6, 0x46, 0x70, 0x48, 0x5e, 0xd4, 0x0d, 0x4a, 0x06, 0x62,
	0x0d, 0xd7, 0x53, 0x8e, 0x2b, 0x34, 0x83, 0xc8, 0x18, 0x1f, 0x8d, 0x28, 0x96, 0x33, 0x5a, 0x32,
	0x43, 0x33, 0x2e, 0xf0, 0x6c, 0x52, 0xe0, 0xef, 0x41, 0x4e, 0x4c, 0x84, 0x95, 0x73, 0x42, 0xda,
	0x2f, 0x79, 0x36, 0x05, 0x46, 0x5b, 0x90, 0x39, 0x24, 0x84, 0x95, 0xf3, 0xaf, 0x92, 0x24, 0xa0,
	0x31, 0x81, 0x17, 0x5e, 0x28, 0xf0, 0xc5, 0x0b, 0x02, 0xff, 0x4e, 0x83, 0xe5, 0x44, 0xc5, 0x40,
	0x88, 0xd1, 0x26, 0x69, 0xaa, 0x15, 0xb5, 0x41, 0x97, 0x6e, 0x5b, 0xea, 0xf2, 0x6d, 0xbb, 0x07,
	0x39, 0xec, 0xd1, 0x69, 0x28, 0x79, 0xa3, 0x19, 0x10, 0xfd, 0xe3, 0xb4, 0xf6, 0x66, 0x6c, 0x4a,
	0xea, 0x5f, 0x8c, 0xfc, 0x73, 0x83, 0x39, 0x8f, 0x74, 0x7e, 0x34, 0x26, 0xac, 0xb9, 0xe7, 0x73,
	0x53, 0x65, 0x37, 0xfe, 0xd6, 0x60, 0x51, 0xd6, 0xf4, 0x0f, 0xe9, 0x73, 0xcb, 0xb7, 0x06, 0x59,
	0x87, 0xf8, 0xd4, 0x53, 0x2c, 0xa4, 0x91, 0xd8, 0xa5, 0x74, 0x72, 0x97, 0x5e, 0xe7, 0x83, 0xf1,
	0x4e, 0x0c, 0xeb, 0x10, 0xdb, 0xf5, 0xf0, 0x88, 0xa9, 0xe9, 0x46, 0x1f, 0xf2, 0xb6, 0xf2, 0xa3,
	0x7d, 0x80, 0xd8, 0x86, 0xe4, 0x84, 0x2a, 0x5f, 0xa7, 0xe7, 0x36, 0xb1, 0xcd, 0x58, 0x85, 0x86,
	0x01, 0x10, 0xb5, 0xcd, 0xd0, 0x6d, 0x28, 0x2a, 0xb6, 0x81, 0x59, 0xd6, 0x84, 0x28, 0xae, 0x9e,
	0x8b, 0x22, 0x82, 0x9a, 0xc0, 0xa3, 0xac, 0xc6, 0x06, 0x64, 0xf7, 0xda, 0x5d, 0xc2, 0xd1, 0x0a,
	0xa4, 0x5d, 0x47, 0xa6, 0x65, 0xcc, 0xe0, 0xd8, 0xf8, 0x51, 0x83, 0x82, 0x35, 0xef, 0x72, 0xcc,
	0xa7, 0x0c, 0xbd, 0x0b, 0xe0, 0xfa, 0xbd, 0x70, 0xfb, 0x35, 0x31, 0xaf, 0xd2, 0xb3, 0xd3, 0x5a,
	0xcc, 0x6b, 0x16, 0x5c, 0xdf, 0x92, 0xdf, 0x03, 0x1d, 0x8a, 0x74, 0xca, 0x23, 0xb8, 0x78, 0x79,
	0xe3, 0xca, 0xb3, 0xd3, 0x5a, 0xdc, 0x6d, 0x2e, 0xd2, 0x29, 0x57, 0x09, 0x77, 0x21, 0xc7, 0xc4,
	0x45, 0x62, 0x18, 0xa5, 0xed, 0x6b, 0x31, 0xde, 0x8a, 0x82, 0x75, 0x34, 0x26, 0x06, 0x3c, 0x3b,
	0xad, 0x29, 0xa4, 0xa9, 0xfe, 0x5e, 0xff, 0x39, 0x05, 0x4b, 0x71, 0x10, 0xba, 0x09, 0x57, 0xad,
	0x87, 0xbd, 0xae, 0xb5, 0x63, 0x1d, 0x74, 0x7b, 0xfb, 0xf7, 0xad, 0xde, 0xbd, 0xfb, 0x07, 0xfb,
	0xed, 0x95, 0x85, 0xca, 0xfa, 0xf1, 0x49, 0xfd, 0xb2, 0x10, 0xfa, 0x10, 0x2a, 0xe7, 0xee, 0x76,
	0xe7, 0xb3, 0xfb, 0xdd, 0x3d, 0xab, 0x67, 0x76, 0x5a, 0x9d, 0xbd, 0x07, 0x9d, 0xf6, 0x8a, 0x56,
	0xa9, 0x1e, 0x9f, 0xd4, 0xff, 0x03, 0x81, 0xee, 0xc0, 0xfa, 0x79, 0xd4, 0xd8, 0xb1, 0x5a, 0xbb,
	0xbd, 0x96, 0xd9, 0xd9, 0xb1, 0x3a, 0xed, 0x95, 0x54, 0xe5, 0x7f, 0xc7, 0x27, 0xf5, 0x17, 0x85,
	0xd1, 0x5d, 0x28, 0x5f, 0x0c, 0x75, 0x1e, 0x76, 0x5a, 0x07, 0x41, 0x6a, 0xba, 0xf2, 0xff, 0xe3,
	0x93, 0xfa, 0x0b, 0xe3, 0xa8, 0x09, 0xe8, 0x3c, 0x66, 0x76, 0xee, 0x1d, 0xec, 0xb7, 0x3b, 0xed,
	0x95, 0x4c, 0xe5, 0xda, 0xf1, 0x49, 0xfd, 0x92, 0x48, 0x25, 0xf3, 0xf5, 0x0f, 0xd5, 0x05, 0xe3,
	0xe3, 0xc7, 0x67, 0x55, 0xed, 0xc9, 0x59, 0x55, 0xfb, 0xeb, 0xac, 0xaa, 0x7d, 0xf3, 0xb4, 0xba,
	0xf0, 0xe4, 0x69, 0x75, 0xe1, 0xf7, 0xa7, 0xd5, 0x85, 0x2f, 0x6e, 0xc6, 0x34, 0xf8, 0xa9, 0xeb,
	0x73, 0x32, 0xb1, 0x08, 0xf6, 0xe4, 0xcf, 0x49, 0xdd, 0xa3, 0xce, 0x74, 0x44, 0xf4, 0xb9, 0x32,
	0x85, 0x22, 0xfb, 0x39, 0xf1, 0x9b, 0xec, 0xd6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x58, 0x28,
	0xf9, 0x72, 0x7c, 0x0a, 0x00, 0x00,
}

func (m *ExternalEventVoteRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalEventVoteRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalEventVoteRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Accepted {
		i--
		if m.Accepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Votes[iNdEx])
			copy(dAtA[i:], m.Votes[iNdEx])
			i = encodeVarintMhub2(dAtA, i, uint64(len(m.Votes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMhub2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LatestBlockHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestBlockHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestBlockHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosmosHeight != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.CosmosHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ExternalHeight != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.ExternalHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalAddress) > 0 {
		i -= len(m.ExternalAddress)
		copy(dAtA[i:], m.ExternalAddress)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.ExternalAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Power != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMhub2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x30
	}
	if m.Height != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExternalTokenId) > 0 {
		i -= len(m.ExternalTokenId)
		copy(dAtA[i:], m.ExternalTokenId)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.ExternalTokenId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMhub2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendToExternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendToExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendToExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValCommission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMhub2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMhub2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMhub2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExternalRecipient) > 0 {
		i -= len(m.ExternalRecipient)
		copy(dAtA[i:], m.ExternalRecipient)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.ExternalRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x48
	}
	if m.Height != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMhub2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMhub2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InvalidationScope) > 0 {
		i -= len(m.InvalidationScope)
		copy(dAtA[i:], m.InvalidationScope)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.InvalidationScope)))
		i--
		dAtA[i] = 0x12
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMhub2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ExternalTokenId) > 0 {
		i -= len(m.ExternalTokenId)
		copy(dAtA[i:], m.ExternalTokenId)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.ExternalTokenId)))
		i--
		dAtA[i] = 0x12
	}
	if m.TokenId != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMhub2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ExternalDecimals != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.ExternalDecimals))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExternalTokenId) > 0 {
		i -= len(m.ExternalTokenId)
		copy(dAtA[i:], m.ExternalTokenId)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.ExternalTokenId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenInfos) > 0 {
		for iNdEx := len(m.TokenInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMhub2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IDSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA6 := make([]byte, len(m.Ids)*10)
		var j5 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintMhub2(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMhub2(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OutTxHash) > 0 {
		i -= len(m.OutTxHash)
		copy(dAtA[i:], m.OutTxHash)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.OutTxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintMhub2(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMhub2(dAtA []byte, offset int, v uint64) int {
	offset -= sovMhub2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExternalEventVoteRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovMhub2(uint64(l))
	}
	if len(m.Votes) > 0 {
		for _, s := range m.Votes {
			l = len(s)
			n += 1 + l + sovMhub2(uint64(l))
		}
	}
	if m.Accepted {
		n += 2
	}
	return n
}

func (m *LatestBlockHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalHeight != 0 {
		n += 1 + sovMhub2(uint64(m.ExternalHeight))
	}
	if m.CosmosHeight != 0 {
		n += 1 + sovMhub2(uint64(m.CosmosHeight))
	}
	return n
}

func (m *ExternalSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Power != 0 {
		n += 1 + sovMhub2(uint64(m.Power))
	}
	l = len(m.ExternalAddress)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	return n
}

func (m *SignerSetTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMhub2(uint64(m.Nonce))
	}
	if m.Height != 0 {
		n += 1 + sovMhub2(uint64(m.Height))
	}
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovMhub2(uint64(l))
		}
	}
	if m.Sequence != 0 {
		n += 1 + sovMhub2(uint64(m.Sequence))
	}
	return n
}

func (m *BatchTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNonce != 0 {
		n += 1 + sovMhub2(uint64(m.BatchNonce))
	}
	if m.Timeout != 0 {
		n += 1 + sovMhub2(uint64(m.Timeout))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovMhub2(uint64(l))
		}
	}
	l = len(m.ExternalTokenId)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovMhub2(uint64(m.Height))
	}
	if m.Sequence != 0 {
		n += 1 + sovMhub2(uint64(m.Sequence))
	}
	return n
}

func (m *SendToExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMhub2(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = len(m.ExternalRecipient)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = m.Token.Size()
	n += 1 + l + sovMhub2(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovMhub2(uint64(l))
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = m.ValCommission.Size()
	n += 1 + l + sovMhub2(uint64(l))
	return n
}

func (m *ContractCallTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidationNonce != 0 {
		n += 1 + sovMhub2(uint64(m.InvalidationNonce))
	}
	l = len(m.InvalidationScope)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovMhub2(uint64(m.Timeout))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovMhub2(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovMhub2(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovMhub2(uint64(m.Height))
	}
	if m.Sequence != 0 {
		n += 1 + sovMhub2(uint64(m.Sequence))
	}
	return n
}

func (m *ExternalToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenId != 0 {
		n += 1 + sovMhub2(uint64(m.TokenId))
	}
	l = len(m.ExternalTokenId)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMhub2(uint64(l))
	return n
}

func (m *TokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMhub2(uint64(m.Id))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = len(m.ExternalTokenId)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	if m.ExternalDecimals != 0 {
		n += 1 + sovMhub2(uint64(m.ExternalDecimals))
	}
	l = m.Commission.Size()
	n += 1 + l + sovMhub2(uint64(l))
	return n
}

func (m *TokenInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenInfos) > 0 {
		for _, e := range m.TokenInfos {
			l = e.Size()
			n += 1 + l + sovMhub2(uint64(l))
		}
	}
	return n
}

func (m *IDSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovMhub2(uint64(e))
		}
		n += 1 + sovMhub2(uint64(l)) + l
	}
	return n
}

func (m *TxStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	l = len(m.OutTxHash)
	if l > 0 {
		n += 1 + l + sovMhub2(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMhub2(uint64(m.Status))
	}
	return n
}

func sovMhub2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMhub2(x uint64) (n int) {
	return sovMhub2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExternalEventVoteRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalEventVoteRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalEventVoteRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &types.Any{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accepted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestBlockHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestBlockHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestBlockHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalHeight", wireType)
			}
			m.ExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosHeight", wireType)
			}
			m.CosmosHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CosmosHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, &ExternalSigner{})
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &SendToExternal{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendToExternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendToExternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendToExternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValCommission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValCommission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationScope", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationScope = append(m.InvalidationScope[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationScope == nil {
				m.InvalidationScope = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, ExternalToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, ExternalToken{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalDecimals", wireType)
			}
			m.ExternalDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalDecimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenInfos = append(m.TokenInfos, &TokenInfo{})
			if err := m.TokenInfos[len(m.TokenInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMhub2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMhub2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMhub2
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMhub2
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMhub2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMhub2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMhub2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TxStatusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMhub2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMhub2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMhub2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMhub2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMhub2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMhub2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMhub2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMhub2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMhub2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMhub2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMhub2 = fmt.Errorf("proto: unexpected end of group")
)
