// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mhub2/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSendToExternal submits a SendToExternal attempt to bridge an asset over to
// External chain. The SendToExternal will be stored and then included in a batch and
// then submitted to external chain.
type MsgSendToExternal struct {
	Sender            string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ExternalRecipient string     `protobuf:"bytes,2,opt,name=external_recipient,json=externalRecipient,proto3" json:"external_recipient,omitempty"`
	Amount            types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	BridgeFee         types.Coin `protobuf:"bytes,4,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee"`
	ChainId           string     `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgSendToExternal) Reset()         { *m = MsgSendToExternal{} }
func (m *MsgSendToExternal) String() string { return proto.CompactTextString(m) }
func (*MsgSendToExternal) ProtoMessage()    {}
func (*MsgSendToExternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{0}
}
func (m *MsgSendToExternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToExternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToExternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToExternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToExternal.Merge(m, src)
}
func (m *MsgSendToExternal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToExternal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToExternal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToExternal proto.InternalMessageInfo

func (m *MsgSendToExternal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendToExternal) GetExternalRecipient() string {
	if m != nil {
		return m.ExternalRecipient
	}
	return ""
}

func (m *MsgSendToExternal) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgSendToExternal) GetBridgeFee() types.Coin {
	if m != nil {
		return m.BridgeFee
	}
	return types.Coin{}
}

func (m *MsgSendToExternal) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// MsgSendToExternalResponse returns the SendToExternal transaction ID which
// will be included in the batch tx.
type MsgSendToExternalResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgSendToExternalResponse) Reset()         { *m = MsgSendToExternalResponse{} }
func (m *MsgSendToExternalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToExternalResponse) ProtoMessage()    {}
func (*MsgSendToExternalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{1}
}
func (m *MsgSendToExternalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToExternalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToExternalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToExternalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToExternalResponse.Merge(m, src)
}
func (m *MsgSendToExternalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToExternalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToExternalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToExternalResponse proto.InternalMessageInfo

func (m *MsgSendToExternalResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgCancelSendToExternal allows the sender to cancel its own outgoing
// SendToExternal tx and recieve a refund of the tokens and bridge fees. This tx
// will only succeed if the SendToExternal tx hasn't been batched to be
// processed and relayed to External.
type MsgCancelSendToExternal struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender  string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgCancelSendToExternal) Reset()         { *m = MsgCancelSendToExternal{} }
func (m *MsgCancelSendToExternal) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToExternal) ProtoMessage()    {}
func (*MsgCancelSendToExternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{2}
}
func (m *MsgCancelSendToExternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToExternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToExternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToExternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToExternal.Merge(m, src)
}
func (m *MsgCancelSendToExternal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToExternal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToExternal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToExternal proto.InternalMessageInfo

func (m *MsgCancelSendToExternal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgCancelSendToExternal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCancelSendToExternal) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type MsgCancelSendToExternalResponse struct {
}

func (m *MsgCancelSendToExternalResponse) Reset()         { *m = MsgCancelSendToExternalResponse{} }
func (m *MsgCancelSendToExternalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToExternalResponse) ProtoMessage()    {}
func (*MsgCancelSendToExternalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{3}
}
func (m *MsgCancelSendToExternalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToExternalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToExternalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToExternalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToExternalResponse.Merge(m, src)
}
func (m *MsgCancelSendToExternalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToExternalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToExternalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToExternalResponse proto.InternalMessageInfo

// MsgRequestBatchTx requests a batch of transactions with a given coin
// denomination to send across the bridge to external chain.
type MsgRequestBatchTx struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Signer  string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgRequestBatchTx) Reset()         { *m = MsgRequestBatchTx{} }
func (m *MsgRequestBatchTx) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchTx) ProtoMessage()    {}
func (*MsgRequestBatchTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{4}
}
func (m *MsgRequestBatchTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchTx.Merge(m, src)
}
func (m *MsgRequestBatchTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchTx proto.InternalMessageInfo

func (m *MsgRequestBatchTx) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgRequestBatchTx) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRequestBatchTx) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type MsgRequestBatchTxResponse struct {
}

func (m *MsgRequestBatchTxResponse) Reset()         { *m = MsgRequestBatchTxResponse{} }
func (m *MsgRequestBatchTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchTxResponse) ProtoMessage()    {}
func (*MsgRequestBatchTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{5}
}
func (m *MsgRequestBatchTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchTxResponse.Merge(m, src)
}
func (m *MsgRequestBatchTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchTxResponse proto.InternalMessageInfo

// MsgSubmitExternalTxConfirmation submits an external signature for a given
// validator
type MsgSubmitExternalTxConfirmation struct {
	// TODO: can we make this take an array?
	Confirmation *types1.Any `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	Signer       string      `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId      string      `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgSubmitExternalTxConfirmation) Reset()         { *m = MsgSubmitExternalTxConfirmation{} }
func (m *MsgSubmitExternalTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitExternalTxConfirmation) ProtoMessage()    {}
func (*MsgSubmitExternalTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{6}
}
func (m *MsgSubmitExternalTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitExternalTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitExternalTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitExternalTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitExternalTxConfirmation.Merge(m, src)
}
func (m *MsgSubmitExternalTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitExternalTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitExternalTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitExternalTxConfirmation proto.InternalMessageInfo

// ContractCallTxConfirmation is a signature on behalf of a validator for a
// ContractCallTx.
type ContractCallTxConfirmation struct {
	InvalidationScope []byte `protobuf:"bytes,1,opt,name=invalidation_scope,json=invalidationScope,proto3" json:"invalidation_scope,omitempty"`
	InvalidationNonce uint64 `protobuf:"varint,2,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	ExternalSigner    string `protobuf:"bytes,3,opt,name=external_signer,json=externalSigner,proto3" json:"external_signer,omitempty"`
	Signature         []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ContractCallTxConfirmation) Reset()         { *m = ContractCallTxConfirmation{} }
func (m *ContractCallTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*ContractCallTxConfirmation) ProtoMessage()    {}
func (*ContractCallTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{7}
}
func (m *ContractCallTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallTxConfirmation.Merge(m, src)
}
func (m *ContractCallTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallTxConfirmation proto.InternalMessageInfo

func (m *ContractCallTxConfirmation) GetInvalidationScope() []byte {
	if m != nil {
		return m.InvalidationScope
	}
	return nil
}

func (m *ContractCallTxConfirmation) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *ContractCallTxConfirmation) GetExternalSigner() string {
	if m != nil {
		return m.ExternalSigner
	}
	return ""
}

func (m *ContractCallTxConfirmation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// BatchTxConfirmation is a signature on behalf of a validator for a BatchTx.
type BatchTxConfirmation struct {
	ExternalTokenId string `protobuf:"bytes,1,opt,name=external_token_id,json=externalTokenId,proto3" json:"external_token_id,omitempty"`
	BatchNonce      uint64 `protobuf:"varint,2,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	ExternalSigner  string `protobuf:"bytes,3,opt,name=external_signer,json=externalSigner,proto3" json:"external_signer,omitempty"`
	Signature       []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *BatchTxConfirmation) Reset()         { *m = BatchTxConfirmation{} }
func (m *BatchTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*BatchTxConfirmation) ProtoMessage()    {}
func (*BatchTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{8}
}
func (m *BatchTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxConfirmation.Merge(m, src)
}
func (m *BatchTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *BatchTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxConfirmation proto.InternalMessageInfo

func (m *BatchTxConfirmation) GetExternalTokenId() string {
	if m != nil {
		return m.ExternalTokenId
	}
	return ""
}

func (m *BatchTxConfirmation) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *BatchTxConfirmation) GetExternalSigner() string {
	if m != nil {
		return m.ExternalSigner
	}
	return ""
}

func (m *BatchTxConfirmation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// SignerSetTxConfirmation is a signature on behalf of a validator for a
// SignerSetTx
type SignerSetTxConfirmation struct {
	SignerSetNonce uint64 `protobuf:"varint,1,opt,name=signer_set_nonce,json=signerSetNonce,proto3" json:"signer_set_nonce,omitempty"`
	ExternalSigner string `protobuf:"bytes,2,opt,name=external_signer,json=externalSigner,proto3" json:"external_signer,omitempty"`
	Signature      []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignerSetTxConfirmation) Reset()         { *m = SignerSetTxConfirmation{} }
func (m *SignerSetTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxConfirmation) ProtoMessage()    {}
func (*SignerSetTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{9}
}
func (m *SignerSetTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxConfirmation.Merge(m, src)
}
func (m *SignerSetTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxConfirmation proto.InternalMessageInfo

func (m *SignerSetTxConfirmation) GetSignerSetNonce() uint64 {
	if m != nil {
		return m.SignerSetNonce
	}
	return 0
}

func (m *SignerSetTxConfirmation) GetExternalSigner() string {
	if m != nil {
		return m.ExternalSigner
	}
	return ""
}

func (m *SignerSetTxConfirmation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type MsgSubmitTxConfirmationResponse struct {
}

func (m *MsgSubmitTxConfirmationResponse) Reset()         { *m = MsgSubmitTxConfirmationResponse{} }
func (m *MsgSubmitTxConfirmationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTxConfirmationResponse) ProtoMessage()    {}
func (*MsgSubmitTxConfirmationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{10}
}
func (m *MsgSubmitTxConfirmationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTxConfirmationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTxConfirmationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTxConfirmationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTxConfirmationResponse.Merge(m, src)
}
func (m *MsgSubmitTxConfirmationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTxConfirmationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTxConfirmationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTxConfirmationResponse proto.InternalMessageInfo

// MsgSubmitExternalEvent
type MsgSubmitExternalEvent struct {
	Event   *types1.Any `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Signer  string      `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId string      `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgSubmitExternalEvent) Reset()         { *m = MsgSubmitExternalEvent{} }
func (m *MsgSubmitExternalEvent) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitExternalEvent) ProtoMessage()    {}
func (*MsgSubmitExternalEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{11}
}
func (m *MsgSubmitExternalEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitExternalEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitExternalEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitExternalEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitExternalEvent.Merge(m, src)
}
func (m *MsgSubmitExternalEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitExternalEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitExternalEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitExternalEvent proto.InternalMessageInfo

type MsgSubmitExternalEventResponse struct {
}

func (m *MsgSubmitExternalEventResponse) Reset()         { *m = MsgSubmitExternalEventResponse{} }
func (m *MsgSubmitExternalEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitExternalEventResponse) ProtoMessage()    {}
func (*MsgSubmitExternalEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{12}
}
func (m *MsgSubmitExternalEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitExternalEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitExternalEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitExternalEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitExternalEventResponse.Merge(m, src)
}
func (m *MsgSubmitExternalEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitExternalEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitExternalEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitExternalEventResponse proto.InternalMessageInfo

// MsgDelegateKey allows validators to delegate their voting responsibilities
// to a given orchestrator address. This key is then used as an optional
// authentication method for attesting events from External Chain.
type MsgDelegateKeys struct {
	ValidatorAddress    string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	ExternalAddress     string `protobuf:"bytes,3,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
	EthSignature        []byte `protobuf:"bytes,4,opt,name=eth_signature,json=ethSignature,proto3" json:"eth_signature,omitempty"`
	ChainId             string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgDelegateKeys) Reset()         { *m = MsgDelegateKeys{} }
func (m *MsgDelegateKeys) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateKeys) ProtoMessage()    {}
func (*MsgDelegateKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{13}
}
func (m *MsgDelegateKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateKeys.Merge(m, src)
}
func (m *MsgDelegateKeys) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateKeys.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateKeys proto.InternalMessageInfo

func (m *MsgDelegateKeys) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgDelegateKeys) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *MsgDelegateKeys) GetExternalAddress() string {
	if m != nil {
		return m.ExternalAddress
	}
	return ""
}

func (m *MsgDelegateKeys) GetEthSignature() []byte {
	if m != nil {
		return m.EthSignature
	}
	return nil
}

func (m *MsgDelegateKeys) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type MsgDelegateKeysResponse struct {
}

func (m *MsgDelegateKeysResponse) Reset()         { *m = MsgDelegateKeysResponse{} }
func (m *MsgDelegateKeysResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateKeysResponse) ProtoMessage()    {}
func (*MsgDelegateKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{14}
}
func (m *MsgDelegateKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateKeysResponse.Merge(m, src)
}
func (m *MsgDelegateKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateKeysResponse proto.InternalMessageInfo

// DelegateKeysSignMsg defines the message structure an operator is expected to
// sign when submitting a MsgDelegateKeys message. The resulting signature should
// populate the eth_signature field.
type DelegateKeysSignMsg struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Nonce            uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *DelegateKeysSignMsg) Reset()         { *m = DelegateKeysSignMsg{} }
func (m *DelegateKeysSignMsg) String() string { return proto.CompactTextString(m) }
func (*DelegateKeysSignMsg) ProtoMessage()    {}
func (*DelegateKeysSignMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{15}
}
func (m *DelegateKeysSignMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeysSignMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeysSignMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeysSignMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeysSignMsg.Merge(m, src)
}
func (m *DelegateKeysSignMsg) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeysSignMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeysSignMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeysSignMsg proto.InternalMessageInfo

func (m *DelegateKeysSignMsg) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *DelegateKeysSignMsg) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// SendToHubEvent is submitted when the SendToHubEvent is emitted by they
// mhub2 contract.
type SendToHubEvent struct {
	EventNonce     uint64                                 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	ExternalCoinId string                                 `protobuf:"bytes,2,opt,name=external_coin_id,json=externalCoinId,proto3" json:"external_coin_id,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Sender         string                                 `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	CosmosReceiver string                                 `protobuf:"bytes,5,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
	ExternalHeight uint64                                 `protobuf:"varint,6,opt,name=external_height,json=externalHeight,proto3" json:"external_height,omitempty"`
	TxHash         string                                 `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *SendToHubEvent) Reset()         { *m = SendToHubEvent{} }
func (m *SendToHubEvent) String() string { return proto.CompactTextString(m) }
func (*SendToHubEvent) ProtoMessage()    {}
func (*SendToHubEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{16}
}
func (m *SendToHubEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendToHubEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendToHubEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendToHubEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToHubEvent.Merge(m, src)
}
func (m *SendToHubEvent) XXX_Size() int {
	return m.Size()
}
func (m *SendToHubEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToHubEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SendToHubEvent proto.InternalMessageInfo

func (m *SendToHubEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *SendToHubEvent) GetExternalCoinId() string {
	if m != nil {
		return m.ExternalCoinId
	}
	return ""
}

func (m *SendToHubEvent) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SendToHubEvent) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

func (m *SendToHubEvent) GetExternalHeight() uint64 {
	if m != nil {
		return m.ExternalHeight
	}
	return 0
}

func (m *SendToHubEvent) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// TransferToChainEvent is submitted when the TransferToChainEvent is emitted by they
// mhub2 contract.
type TransferToChainEvent struct {
	EventNonce       uint64                                 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	ExternalCoinId   string                                 `protobuf:"bytes,2,opt,name=external_coin_id,json=externalCoinId,proto3" json:"external_coin_id,omitempty"`
	Amount           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Fee              github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=fee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee"`
	Sender           string                                 `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	ReceiverChainId  string                                 `protobuf:"bytes,6,opt,name=receiver_chain_id,json=receiverChainId,proto3" json:"receiver_chain_id,omitempty"`
	ExternalReceiver string                                 `protobuf:"bytes,7,opt,name=external_receiver,json=externalReceiver,proto3" json:"external_receiver,omitempty"`
	ExternalHeight   uint64                                 `protobuf:"varint,8,opt,name=external_height,json=externalHeight,proto3" json:"external_height,omitempty"`
	TxHash           string                                 `protobuf:"bytes,9,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *TransferToChainEvent) Reset()         { *m = TransferToChainEvent{} }
func (m *TransferToChainEvent) String() string { return proto.CompactTextString(m) }
func (*TransferToChainEvent) ProtoMessage()    {}
func (*TransferToChainEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{17}
}
func (m *TransferToChainEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferToChainEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferToChainEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferToChainEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferToChainEvent.Merge(m, src)
}
func (m *TransferToChainEvent) XXX_Size() int {
	return m.Size()
}
func (m *TransferToChainEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferToChainEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TransferToChainEvent proto.InternalMessageInfo

func (m *TransferToChainEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *TransferToChainEvent) GetExternalCoinId() string {
	if m != nil {
		return m.ExternalCoinId
	}
	return ""
}

func (m *TransferToChainEvent) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TransferToChainEvent) GetReceiverChainId() string {
	if m != nil {
		return m.ReceiverChainId
	}
	return ""
}

func (m *TransferToChainEvent) GetExternalReceiver() string {
	if m != nil {
		return m.ExternalReceiver
	}
	return ""
}

func (m *TransferToChainEvent) GetExternalHeight() uint64 {
	if m != nil {
		return m.ExternalHeight
	}
	return 0
}

func (m *TransferToChainEvent) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// BatchExecutedEvent claims that a batch of BatchTxExecuted operations on the
// bridge contract was executed successfully
type BatchExecutedEvent struct {
	ExternalCoinId string                                 `protobuf:"bytes,1,opt,name=external_coin_id,json=externalCoinId,proto3" json:"external_coin_id,omitempty"`
	EventNonce     uint64                                 `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	ExternalHeight uint64                                 `protobuf:"varint,3,opt,name=external_height,json=externalHeight,proto3" json:"external_height,omitempty"`
	BatchNonce     uint64                                 `protobuf:"varint,4,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	TxHash         string                                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	FeePaid        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=fee_paid,json=feePaid,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_paid"`
	FeePayer       string                                 `protobuf:"bytes,7,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
}

func (m *BatchExecutedEvent) Reset()         { *m = BatchExecutedEvent{} }
func (m *BatchExecutedEvent) String() string { return proto.CompactTextString(m) }
func (*BatchExecutedEvent) ProtoMessage()    {}
func (*BatchExecutedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{18}
}
func (m *BatchExecutedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchExecutedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchExecutedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchExecutedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchExecutedEvent.Merge(m, src)
}
func (m *BatchExecutedEvent) XXX_Size() int {
	return m.Size()
}
func (m *BatchExecutedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchExecutedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BatchExecutedEvent proto.InternalMessageInfo

func (m *BatchExecutedEvent) GetExternalCoinId() string {
	if m != nil {
		return m.ExternalCoinId
	}
	return ""
}

func (m *BatchExecutedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *BatchExecutedEvent) GetExternalHeight() uint64 {
	if m != nil {
		return m.ExternalHeight
	}
	return 0
}

func (m *BatchExecutedEvent) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *BatchExecutedEvent) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *BatchExecutedEvent) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

// NOTE: bytes.HexBytes is supposed to "help" with json encoding/decoding
// investigate?
type ContractCallExecutedEvent struct {
	EventNonce        uint64                                               `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	InvalidationScope github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=invalidation_scope,json=invalidationScope,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"invalidation_scope,omitempty"`
	InvalidationNonce uint64                                               `protobuf:"varint,3,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	ReturnData        []byte                                               `protobuf:"bytes,4,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	ExternalHeight    uint64                                               `protobuf:"varint,5,opt,name=external_height,json=externalHeight,proto3" json:"external_height,omitempty"`
	TxHash            string                                               `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *ContractCallExecutedEvent) Reset()         { *m = ContractCallExecutedEvent{} }
func (m *ContractCallExecutedEvent) String() string { return proto.CompactTextString(m) }
func (*ContractCallExecutedEvent) ProtoMessage()    {}
func (*ContractCallExecutedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{19}
}
func (m *ContractCallExecutedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallExecutedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallExecutedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallExecutedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallExecutedEvent.Merge(m, src)
}
func (m *ContractCallExecutedEvent) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallExecutedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallExecutedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallExecutedEvent proto.InternalMessageInfo

func (m *ContractCallExecutedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *ContractCallExecutedEvent) GetInvalidationScope() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.InvalidationScope
	}
	return nil
}

func (m *ContractCallExecutedEvent) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *ContractCallExecutedEvent) GetReturnData() []byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *ContractCallExecutedEvent) GetExternalHeight() uint64 {
	if m != nil {
		return m.ExternalHeight
	}
	return 0
}

func (m *ContractCallExecutedEvent) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// This informs the Cosmos module that a validator
// set has been updated.
type SignerSetTxExecutedEvent struct {
	EventNonce       uint64            `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	SignerSetTxNonce uint64            `protobuf:"varint,2,opt,name=signer_set_tx_nonce,json=signerSetTxNonce,proto3" json:"signer_set_tx_nonce,omitempty"`
	ExternalHeight   uint64            `protobuf:"varint,3,opt,name=external_height,json=externalHeight,proto3" json:"external_height,omitempty"`
	Members          []*ExternalSigner `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	TxHash           string            `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *SignerSetTxExecutedEvent) Reset()         { *m = SignerSetTxExecutedEvent{} }
func (m *SignerSetTxExecutedEvent) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxExecutedEvent) ProtoMessage()    {}
func (*SignerSetTxExecutedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_be2955e5a84f15d4, []int{20}
}
func (m *SignerSetTxExecutedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxExecutedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxExecutedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxExecutedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxExecutedEvent.Merge(m, src)
}
func (m *SignerSetTxExecutedEvent) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxExecutedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxExecutedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxExecutedEvent proto.InternalMessageInfo

func (m *SignerSetTxExecutedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *SignerSetTxExecutedEvent) GetSignerSetTxNonce() uint64 {
	if m != nil {
		return m.SignerSetTxNonce
	}
	return 0
}

func (m *SignerSetTxExecutedEvent) GetExternalHeight() uint64 {
	if m != nil {
		return m.ExternalHeight
	}
	return 0
}

func (m *SignerSetTxExecutedEvent) GetMembers() []*ExternalSigner {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *SignerSetTxExecutedEvent) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgSendToExternal)(nil), "mhub2.v1.MsgSendToExternal")
	proto.RegisterType((*MsgSendToExternalResponse)(nil), "mhub2.v1.MsgSendToExternalResponse")
	proto.RegisterType((*MsgCancelSendToExternal)(nil), "mhub2.v1.MsgCancelSendToExternal")
	proto.RegisterType((*MsgCancelSendToExternalResponse)(nil), "mhub2.v1.MsgCancelSendToExternalResponse")
	proto.RegisterType((*MsgRequestBatchTx)(nil), "mhub2.v1.MsgRequestBatchTx")
	proto.RegisterType((*MsgRequestBatchTxResponse)(nil), "mhub2.v1.MsgRequestBatchTxResponse")
	proto.RegisterType((*MsgSubmitExternalTxConfirmation)(nil), "mhub2.v1.MsgSubmitExternalTxConfirmation")
	proto.RegisterType((*ContractCallTxConfirmation)(nil), "mhub2.v1.ContractCallTxConfirmation")
	proto.RegisterType((*BatchTxConfirmation)(nil), "mhub2.v1.BatchTxConfirmation")
	proto.RegisterType((*SignerSetTxConfirmation)(nil), "mhub2.v1.SignerSetTxConfirmation")
	proto.RegisterType((*MsgSubmitTxConfirmationResponse)(nil), "mhub2.v1.MsgSubmitTxConfirmationResponse")
	proto.RegisterType((*MsgSubmitExternalEvent)(nil), "mhub2.v1.MsgSubmitExternalEvent")
	proto.RegisterType((*MsgSubmitExternalEventResponse)(nil), "mhub2.v1.MsgSubmitExternalEventResponse")
	proto.RegisterType((*MsgDelegateKeys)(nil), "mhub2.v1.MsgDelegateKeys")
	proto.RegisterType((*MsgDelegateKeysResponse)(nil), "mhub2.v1.MsgDelegateKeysResponse")
	proto.RegisterType((*DelegateKeysSignMsg)(nil), "mhub2.v1.DelegateKeysSignMsg")
	proto.RegisterType((*SendToHubEvent)(nil), "mhub2.v1.SendToHubEvent")
	proto.RegisterType((*TransferToChainEvent)(nil), "mhub2.v1.TransferToChainEvent")
	proto.RegisterType((*BatchExecutedEvent)(nil), "mhub2.v1.BatchExecutedEvent")
	proto.RegisterType((*ContractCallExecutedEvent)(nil), "mhub2.v1.ContractCallExecutedEvent")
	proto.RegisterType((*SignerSetTxExecutedEvent)(nil), "mhub2.v1.SignerSetTxExecutedEvent")
}

func init() { proto.RegisterFile("mhub2/v1/msgs.proto", fileDescriptor_be2955e5a84f15d4) }

var fileDescriptor_be2955e5a84f15d4 = []byte{
	// 1382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfa, 0x4f, 0xfe, 0xbc, 0xa4, 0xf9, 0xb3, 0xb1, 0x5a, 0xdb, 0xad, 0xec, 0xc4, 0x95,
	0x68, 0xda, 0x2a, 0x6b, 0x12, 0x90, 0x40, 0x95, 0x40, 0xd4, 0x6e, 0xaa, 0x04, 0x14, 0x04, 0xb6,
	0x0f, 0x08, 0x55, 0xb2, 0xc6, 0xbb, 0xcf, 0xeb, 0x55, 0xed, 0x59, 0xb3, 0x33, 0x8e, 0xec, 0x6f,
	0x80, 0x38, 0xf5, 0x23, 0xf4, 0xc0, 0x05, 0xc4, 0x81, 0x43, 0x25, 0xce, 0xbd, 0x55, 0x3d, 0xf5,
	0x88, 0x10, 0xaa, 0xaa, 0xf6, 0xc2, 0x89, 0x0f, 0xc0, 0x09, 0xed, 0xcc, 0xae, 0x33, 0xeb, 0xac,
	0x93, 0xa6, 0xe2, 0xc0, 0xc9, 0x9e, 0xf7, 0xde, 0xbc, 0xfd, 0xbd, 0xf7, 0x7e, 0x33, 0xef, 0x0d,
	0x6c, 0xf4, 0xbb, 0xc3, 0xf6, 0x5e, 0xe5, 0x78, 0xb7, 0xd2, 0x67, 0x36, 0x33, 0x06, 0x9e, 0xcb,
	0x5d, 0x7d, 0x41, 0x08, 0x8d, 0xe3, 0xdd, 0x42, 0xd1, 0x74, 0x59, 0xdf, 0x65, 0x95, 0x36, 0x61,
	0x58, 0x39, 0xde, 0x6d, 0x23, 0x27, 0xbb, 0x15, 0xd3, 0x75, 0xa8, 0xb4, 0x2c, 0xe4, 0xa5, 0xbe,
	0x25, 0x56, 0x15, 0xb9, 0x08, 0x54, 0xd9, 0x13, 0xcf, 0xc2, 0x5b, 0x20, 0xb5, 0x5d, 0xdb, 0x95,
	0xd6, 0xfe, 0xbf, 0x40, 0x7a, 0xcd, 0x76, 0x5d, 0xbb, 0x87, 0x15, 0x32, 0x70, 0x2a, 0x84, 0x52,
	0x97, 0x13, 0xee, 0xb8, 0x34, 0xf4, 0x94, 0x0f, 0xb4, 0x62, 0xd5, 0x1e, 0x76, 0x2a, 0x84, 0x8e,
	0xa5, 0xaa, 0xfc, 0xb7, 0x06, 0xeb, 0x47, 0xcc, 0x6e, 0x20, 0xb5, 0x9a, 0xee, 0xfe, 0x88, 0xa3,
	0x47, 0x49, 0x4f, 0xbf, 0x0c, 0x73, 0x0c, 0xa9, 0x85, 0x5e, 0x4e, 0xdb, 0xd4, 0xb6, 0x17, 0xeb,
	0xc1, 0x4a, 0xdf, 0x01, 0x1d, 0x03, 0x9b, 0x96, 0x87, 0xa6, 0x33, 0x70, 0x90, 0xf2, 0x5c, 0x52,
	0xd8, 0xac, 0x87, 0x9a, 0x7a, 0xa8, 0xd0, 0x3f, 0x82, 0x39, 0xd2, 0x77, 0x87, 0x94, 0xe7, 0x52,
	0x9b, 0xda, 0xf6, 0xd2, 0x5e, 0xde, 0x08, 0x02, 0xf4, 0xb3, 0x61, 0x04, 0xd9, 0x30, 0x6a, 0xae,
	0x43, 0xab, 0xe9, 0x67, 0x2f, 0x4b, 0x89, 0x7a, 0x60, 0xae, 0x7f, 0x0a, 0xd0, 0xf6, 0x1c, 0xcb,
	0xc6, 0x56, 0x07, 0x31, 0x97, 0x7e, 0xbb, 0xcd, 0x8b, 0x72, 0xcb, 0x7d, 0x44, 0x3d, 0x0f, 0x0b,
	0x66, 0x97, 0x38, 0xb4, 0xe5, 0x58, 0xb9, 0x8c, 0x40, 0x37, 0x2f, 0xd6, 0x87, 0x56, 0xf9, 0x36,
	0xe4, 0x4f, 0xc5, 0x5b, 0x47, 0x36, 0x70, 0x29, 0x43, 0x7d, 0x05, 0x92, 0x8e, 0x25, 0x62, 0x4e,
	0xd7, 0x93, 0x8e, 0x55, 0x7e, 0x00, 0x57, 0x8e, 0x98, 0x5d, 0x23, 0xd4, 0xc4, 0xde, 0x54, 0x8a,
	0xa6, 0x4c, 0x95, 0x94, 0x25, 0x23, 0x29, 0x53, 0xa1, 0xa4, 0xa2, 0x50, 0xb6, 0xa0, 0x34, 0xc3,
	0x7b, 0x08, 0xa8, 0xfc, 0x40, 0x54, 0xa7, 0x8e, 0xdf, 0x0d, 0x91, 0xf1, 0x2a, 0xe1, 0x66, 0xb7,
	0x39, 0xd2, 0xb3, 0x90, 0xb1, 0x90, 0xba, 0xfd, 0xa0, 0x38, 0x72, 0x21, 0x00, 0x38, 0x36, 0x55,
	0x00, 0x88, 0xd5, 0x59, 0x00, 0xae, 0x8a, 0x5c, 0x44, 0xbd, 0x4f, 0x3e, 0xfd, 0xab, 0x26, 0xe0,
	0x35, 0x86, 0xed, 0xbe, 0xc3, 0x43, 0x60, 0xcd, 0x51, 0xcd, 0xa5, 0x1d, 0xc7, 0xeb, 0x0b, 0x7e,
	0xe9, 0x4d, 0x58, 0x36, 0x95, 0xb5, 0x00, 0xb4, 0xb4, 0x97, 0x35, 0x24, 0xdf, 0x8c, 0x90, 0x6f,
	0xc6, 0x5d, 0x3a, 0xae, 0x16, 0x9e, 0x3f, 0xd9, 0xb9, 0x1c, 0xef, 0xa7, 0x1e, 0xf1, 0xf2, 0x0e,
	0x91, 0xdc, 0x49, 0x7f, 0xff, 0xb8, 0x94, 0x28, 0x3f, 0xd5, 0xa0, 0x50, 0x73, 0x29, 0xf7, 0x88,
	0xc9, 0x6b, 0xa4, 0x37, 0x8d, 0x76, 0x07, 0x74, 0x87, 0x1e, 0x93, 0x9e, 0x63, 0x89, 0x75, 0x8b,
	0x99, 0xee, 0x00, 0x05, 0xe6, 0xe5, 0xfa, 0xba, 0xaa, 0x69, 0xf8, 0x8a, 0x53, 0xe6, 0xd4, 0xa5,
	0x26, 0x0a, 0x48, 0xe9, 0xa8, 0xf9, 0x97, 0xbe, 0x42, 0xbf, 0x01, 0xab, 0x93, 0xb3, 0x11, 0xc0,
	0x97, 0x20, 0x57, 0x42, 0x71, 0x43, 0x86, 0x71, 0x0d, 0x16, 0x7d, 0x3d, 0xe1, 0x43, 0x4f, 0x72,
	0x7b, 0xb9, 0x7e, 0x22, 0x28, 0xff, 0xa4, 0xc1, 0x46, 0x50, 0x8a, 0x08, 0xf8, 0x5b, 0x30, 0x39,
	0x60, 0x2d, 0xee, 0x3e, 0x44, 0x91, 0x05, 0x49, 0x80, 0xc9, 0x77, 0x9b, 0xbe, 0xfc, 0xd0, 0xd2,
	0x4b, 0xb0, 0xd4, 0xf6, 0x5d, 0x44, 0x20, 0x83, 0x10, 0xfd, 0xa7, 0x58, 0x7f, 0xd0, 0xe0, 0x8a,
	0x34, 0x6c, 0x20, 0x9f, 0xc2, 0xbb, 0x0d, 0x6b, 0xd2, 0x73, 0x8b, 0x21, 0x0f, 0x80, 0xc8, 0xd3,
	0xb2, 0xc2, 0xc2, 0x2d, 0x33, 0xc1, 0x24, 0xcf, 0x07, 0x93, 0x9a, 0x06, 0xb3, 0xa5, 0xd0, 0x75,
	0x8a, 0x5e, 0x21, 0xa5, 0x1f, 0x69, 0x70, 0xf9, 0x14, 0xa5, 0xf7, 0x8f, 0xfd, 0xab, 0xea, 0x13,
	0xc8, 0xa0, 0xff, 0xe7, 0x4c, 0x0a, 0xaf, 0x3f, 0x7f, 0xb2, 0x73, 0x29, 0xb2, 0xaf, 0x2e, 0x77,
	0xbd, 0x3b, 0x65, 0x37, 0xa1, 0x18, 0x8f, 0x68, 0x02, 0xfa, 0x4f, 0x0d, 0x56, 0x8f, 0x98, 0x7d,
	0x0f, 0x7b, 0x68, 0x13, 0x8e, 0x5f, 0xe0, 0x98, 0xe9, 0xb7, 0x61, 0x3d, 0xa0, 0x9f, 0xeb, 0xb5,
	0x88, 0x65, 0x79, 0xc8, 0x58, 0x40, 0x86, 0xb5, 0x89, 0xe2, 0xae, 0x94, 0xeb, 0xbb, 0x90, 0x75,
	0x3d, 0xb3, 0x8b, 0x8c, 0x7b, 0x11, 0x7b, 0x89, 0x74, 0x43, 0xd5, 0x85, 0x5b, 0x6e, 0xc2, 0xda,
	0xa4, 0x24, 0xa1, 0x79, 0x2a, 0xca, 0xb5, 0xd0, 0xf4, 0x3a, 0x5c, 0x42, 0xde, 0x6d, 0x4d, 0xb3,
	0x64, 0x19, 0x79, 0xb7, 0x11, 0xca, 0xce, 0xba, 0x8f, 0xf3, 0xe2, 0x8a, 0x55, 0xa3, 0x9b, 0x44,
	0xfe, 0x0d, 0x6c, 0xa8, 0x72, 0xdf, 0xdd, 0x11, 0xb3, 0x2f, 0x16, 0x7c, 0x16, 0x32, 0xea, 0x21,
	0x90, 0x8b, 0xf2, 0x2f, 0x49, 0x58, 0x91, 0x37, 0xee, 0xc1, 0xb0, 0x2d, 0x09, 0x50, 0x82, 0x25,
	0x51, 0xca, 0x08, 0x55, 0x41, 0x88, 0x24, 0x4d, 0xb7, 0x95, 0x9c, 0xf8, 0x0d, 0xdc, 0x8f, 0x65,
	0x8a, 0xa7, 0x7e, 0x33, 0x3a, 0xb4, 0xf4, 0xfb, 0x91, 0xb6, 0xb7, 0x58, 0x35, 0xfc, 0xf6, 0xf4,
	0xc7, 0xcb, 0xd2, 0x7b, 0xb6, 0xc3, 0xbb, 0xc3, 0xb6, 0x61, 0xba, 0xfd, 0xa0, 0xd3, 0x07, 0x3f,
	0x3b, 0xcc, 0x7a, 0x58, 0xe1, 0xe3, 0x01, 0x32, 0xe3, 0x90, 0xf2, 0x49, 0x17, 0x3c, 0x69, 0x29,
	0xe9, 0x48, 0x4b, 0xb9, 0x01, 0xab, 0xc1, 0xd4, 0xe0, 0xa1, 0x89, 0xce, 0x31, 0x7a, 0x41, 0x52,
	0x57, 0xa4, 0xb8, 0x1e, 0x48, 0x23, 0x27, 0xab, 0x8b, 0x8e, 0xdd, 0xe5, 0xb9, 0x39, 0x79, 0x04,
	0x43, 0xf1, 0x81, 0x90, 0xea, 0x57, 0x60, 0x9e, 0x8f, 0x5a, 0x5d, 0xc2, 0xba, 0xb9, 0x79, 0xf9,
	0x29, 0x3e, 0x3a, 0x20, 0xac, 0x7b, 0x27, 0xfd, 0xd7, 0xe3, 0x92, 0x56, 0xfe, 0x31, 0x05, 0xd9,
	0xa6, 0x47, 0x28, 0xeb, 0xa0, 0xd7, 0x74, 0x6b, 0x7e, 0xe5, 0xfe, 0xb7, 0x49, 0xfb, 0x0c, 0x52,
	0xe1, 0xcc, 0x70, 0x71, 0x27, 0xfe, 0x56, 0x25, 0xed, 0x99, 0x48, 0xda, 0x6f, 0xc1, 0x7a, 0x98,
	0xef, 0xd6, 0x84, 0xcd, 0x73, 0xf2, 0x54, 0x84, 0x8a, 0x9a, 0x64, 0xb5, 0xcf, 0x51, 0x75, 0x50,
	0x92, 0x45, 0x92, 0xa9, 0x5d, 0x53, 0xe6, 0xa4, 0x99, 0x65, 0x5a, 0x38, 0xaf, 0x4c, 0x8b, 0x31,
	0x65, 0xfa, 0x39, 0x09, 0xba, 0x68, 0x1d, 0xfb, 0x23, 0x34, 0x87, 0x1c, 0x2d, 0x59, 0xa4, 0xb8,
	0x1a, 0x68, 0xb1, 0x35, 0x98, 0x2a, 0x67, 0xf2, 0x54, 0x39, 0x63, 0x90, 0xa6, 0x62, 0x91, 0x4e,
	0x75, 0xa0, 0xf4, 0xa9, 0x0e, 0xa4, 0x84, 0x92, 0x51, 0x43, 0xd1, 0x0f, 0x61, 0xa1, 0x83, 0xd8,
	0x1a, 0x90, 0x30, 0xb9, 0x17, 0x2e, 0xe2, 0x7c, 0x07, 0xf1, 0x2b, 0xe2, 0x58, 0xfa, 0x55, 0x58,
	0x94, 0xae, 0xc6, 0x93, 0xe4, 0x2f, 0x08, 0xdd, 0x18, 0xbd, 0xf2, 0x6f, 0x49, 0xc8, 0xab, 0xb3,
	0x42, 0x34, 0x67, 0xe7, 0x12, 0xdb, 0x8e, 0x9d, 0x25, 0xfc, 0x8c, 0x2d, 0x57, 0x3f, 0xfe, 0xe7,
	0x65, 0xe9, 0x43, 0x05, 0x2c, 0x17, 0xfc, 0xe9, 0x3b, 0x94, 0xab, 0x7f, 0x7b, 0x4e, 0x9b, 0x55,
	0xda, 0x63, 0x8e, 0xcc, 0x38, 0xc0, 0x51, 0xd5, 0xff, 0xf3, 0xf6, 0x53, 0x48, 0x6a, 0xd6, 0x14,
	0x52, 0x82, 0x25, 0x0f, 0xf9, 0xd0, 0xa3, 0x2d, 0x8b, 0x70, 0x12, 0x5c, 0xc6, 0x20, 0x45, 0xf7,
	0x08, 0x27, 0x71, 0x25, 0xcc, 0x9c, 0x47, 0xb6, 0x39, 0xb5, 0x42, 0xe5, 0x57, 0x1a, 0xe4, 0x94,
	0xae, 0x7f, 0xc1, 0xc4, 0xed, 0xc0, 0x86, 0x32, 0x17, 0xf0, 0x51, 0x84, 0x6b, 0x6b, 0xec, 0xc4,
	0xef, 0x05, 0x19, 0xb7, 0x07, 0xf3, 0x7d, 0xec, 0xb7, 0xd1, 0x63, 0xb9, 0xf4, 0x66, 0x6a, 0x7b,
	0x69, 0x2f, 0x67, 0x84, 0x8f, 0x30, 0x63, 0x3f, 0x32, 0x47, 0xd4, 0x43, 0xc3, 0x99, 0x24, 0xdc,
	0x7b, 0x9a, 0x86, 0x94, 0xdf, 0x6a, 0x9a, 0x61, 0x9b, 0x98, 0x8c, 0xfd, 0x57, 0x4f, 0xbc, 0x9e,
	0x7a, 0x46, 0x14, 0xae, 0x9f, 0xa1, 0x9c, 0x74, 0xb5, 0x84, 0xde, 0x81, 0x6c, 0xec, 0x93, 0x62,
	0x2b, 0xb2, 0x3d, 0xce, 0xa4, 0x70, 0xf3, 0x5c, 0x13, 0xe5, 0x3b, 0x4d, 0x58, 0x99, 0x7a, 0x39,
	0x44, 0xd1, 0x47, 0x95, 0x53, 0xe8, 0x67, 0xbc, 0x0a, 0x12, 0x3a, 0x85, 0x6c, 0xdc, 0x90, 0xa5,
	0x47, 0xa1, 0x9d, 0xf5, 0x6c, 0x28, 0xc4, 0x99, 0xce, 0x18, 0xd9, 0x12, 0xba, 0x09, 0x1b, 0x71,
	0x03, 0xdb, 0xe6, 0x19, 0x9f, 0x13, 0x16, 0x85, 0xed, 0xf3, 0x2c, 0x94, 0x8f, 0x7c, 0x0d, 0xab,
	0x0d, 0xe4, 0x91, 0x19, 0x2b, 0x1f, 0xd9, 0xae, 0xaa, 0x0a, 0x5b, 0x33, 0x55, 0x27, 0x2e, 0xab,
	0x9f, 0x3f, 0x7b, 0x5d, 0xd4, 0x5e, 0xbc, 0x2e, 0x6a, 0xaf, 0x5e, 0x17, 0xb5, 0x47, 0x6f, 0x8a,
	0x89, 0x17, 0x6f, 0x8a, 0x89, 0xdf, 0xdf, 0x14, 0x13, 0xdf, 0xbe, 0xaf, 0xdc, 0x0d, 0x47, 0x0e,
	0xe5, 0xe8, 0x35, 0x91, 0xf4, 0xe5, 0x2b, 0xbf, 0xd2, 0x77, 0xad, 0x61, 0x0f, 0x2b, 0xa3, 0x60,
	0x29, 0xae, 0xb5, 0xf6, 0x9c, 0x18, 0x43, 0x3f, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xc8,
	0xad, 0xcd, 0x6d, 0x10, 0x00, 0x00,
}

func (this *SendToHubEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendToHubEvent)
	if !ok {
		that2, ok := that.(SendToHubEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventNonce != that1.EventNonce {
		return false
	}
	if this.ExternalCoinId != that1.ExternalCoinId {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.CosmosReceiver != that1.CosmosReceiver {
		return false
	}
	if this.ExternalHeight != that1.ExternalHeight {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	return true
}
func (this *TransferToChainEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferToChainEvent)
	if !ok {
		that2, ok := that.(TransferToChainEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventNonce != that1.EventNonce {
		return false
	}
	if this.ExternalCoinId != that1.ExternalCoinId {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if !this.Fee.Equal(that1.Fee) {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.ReceiverChainId != that1.ReceiverChainId {
		return false
	}
	if this.ExternalReceiver != that1.ExternalReceiver {
		return false
	}
	if this.ExternalHeight != that1.ExternalHeight {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendToExternal(ctx context.Context, in *MsgSendToExternal, opts ...grpc.CallOption) (*MsgSendToExternalResponse, error)
	CancelSendToExternal(ctx context.Context, in *MsgCancelSendToExternal, opts ...grpc.CallOption) (*MsgCancelSendToExternalResponse, error)
	RequestBatchTx(ctx context.Context, in *MsgRequestBatchTx, opts ...grpc.CallOption) (*MsgRequestBatchTxResponse, error)
	SubmitTxConfirmation(ctx context.Context, in *MsgSubmitExternalTxConfirmation, opts ...grpc.CallOption) (*MsgSubmitTxConfirmationResponse, error)
	SubmitExternalEvent(ctx context.Context, in *MsgSubmitExternalEvent, opts ...grpc.CallOption) (*MsgSubmitExternalEventResponse, error)
	SetDelegateKeys(ctx context.Context, in *MsgDelegateKeys, opts ...grpc.CallOption) (*MsgDelegateKeysResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendToExternal(ctx context.Context, in *MsgSendToExternal, opts ...grpc.CallOption) (*MsgSendToExternalResponse, error) {
	out := new(MsgSendToExternalResponse)
	err := c.cc.Invoke(ctx, "/mhub2.v1.Msg/SendToExternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSendToExternal(ctx context.Context, in *MsgCancelSendToExternal, opts ...grpc.CallOption) (*MsgCancelSendToExternalResponse, error) {
	out := new(MsgCancelSendToExternalResponse)
	err := c.cc.Invoke(ctx, "/mhub2.v1.Msg/CancelSendToExternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBatchTx(ctx context.Context, in *MsgRequestBatchTx, opts ...grpc.CallOption) (*MsgRequestBatchTxResponse, error) {
	out := new(MsgRequestBatchTxResponse)
	err := c.cc.Invoke(ctx, "/mhub2.v1.Msg/RequestBatchTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitTxConfirmation(ctx context.Context, in *MsgSubmitExternalTxConfirmation, opts ...grpc.CallOption) (*MsgSubmitTxConfirmationResponse, error) {
	out := new(MsgSubmitTxConfirmationResponse)
	err := c.cc.Invoke(ctx, "/mhub2.v1.Msg/SubmitTxConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitExternalEvent(ctx context.Context, in *MsgSubmitExternalEvent, opts ...grpc.CallOption) (*MsgSubmitExternalEventResponse, error) {
	out := new(MsgSubmitExternalEventResponse)
	err := c.cc.Invoke(ctx, "/mhub2.v1.Msg/SubmitExternalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDelegateKeys(ctx context.Context, in *MsgDelegateKeys, opts ...grpc.CallOption) (*MsgDelegateKeysResponse, error) {
	out := new(MsgDelegateKeysResponse)
	err := c.cc.Invoke(ctx, "/mhub2.v1.Msg/SetDelegateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendToExternal(context.Context, *MsgSendToExternal) (*MsgSendToExternalResponse, error)
	CancelSendToExternal(context.Context, *MsgCancelSendToExternal) (*MsgCancelSendToExternalResponse, error)
	RequestBatchTx(context.Context, *MsgRequestBatchTx) (*MsgRequestBatchTxResponse, error)
	SubmitTxConfirmation(context.Context, *MsgSubmitExternalTxConfirmation) (*MsgSubmitTxConfirmationResponse, error)
	SubmitExternalEvent(context.Context, *MsgSubmitExternalEvent) (*MsgSubmitExternalEventResponse, error)
	SetDelegateKeys(context.Context, *MsgDelegateKeys) (*MsgDelegateKeysResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendToExternal(ctx context.Context, req *MsgSendToExternal) (*MsgSendToExternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToExternal not implemented")
}
func (*UnimplementedMsgServer) CancelSendToExternal(ctx context.Context, req *MsgCancelSendToExternal) (*MsgCancelSendToExternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendToExternal not implemented")
}
func (*UnimplementedMsgServer) RequestBatchTx(ctx context.Context, req *MsgRequestBatchTx) (*MsgRequestBatchTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBatchTx not implemented")
}
func (*UnimplementedMsgServer) SubmitTxConfirmation(ctx context.Context, req *MsgSubmitExternalTxConfirmation) (*MsgSubmitTxConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTxConfirmation not implemented")
}
func (*UnimplementedMsgServer) SubmitExternalEvent(ctx context.Context, req *MsgSubmitExternalEvent) (*MsgSubmitExternalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExternalEvent not implemented")
}
func (*UnimplementedMsgServer) SetDelegateKeys(ctx context.Context, req *MsgDelegateKeys) (*MsgDelegateKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDelegateKeys not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendToExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToExternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mhub2.v1.Msg/SendToExternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToExternal(ctx, req.(*MsgSendToExternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSendToExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSendToExternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSendToExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mhub2.v1.Msg/CancelSendToExternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSendToExternal(ctx, req.(*MsgCancelSendToExternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBatchTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBatchTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBatchTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mhub2.v1.Msg/RequestBatchTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBatchTx(ctx, req.(*MsgRequestBatchTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitTxConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitExternalTxConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitTxConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mhub2.v1.Msg/SubmitTxConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitTxConfirmation(ctx, req.(*MsgSubmitExternalTxConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitExternalEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mhub2.v1.Msg/SubmitExternalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitExternalEvent(ctx, req.(*MsgSubmitExternalEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDelegateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDelegateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mhub2.v1.Msg/SetDelegateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDelegateKeys(ctx, req.(*MsgDelegateKeys))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mhub2.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToExternal",
			Handler:    _Msg_SendToExternal_Handler,
		},
		{
			MethodName: "CancelSendToExternal",
			Handler:    _Msg_CancelSendToExternal_Handler,
		},
		{
			MethodName: "RequestBatchTx",
			Handler:    _Msg_RequestBatchTx_Handler,
		},
		{
			MethodName: "SubmitTxConfirmation",
			Handler:    _Msg_SubmitTxConfirmation_Handler,
		},
		{
			MethodName: "SubmitExternalEvent",
			Handler:    _Msg_SubmitExternalEvent_Handler,
		},
		{
			MethodName: "SetDelegateKeys",
			Handler:    _Msg_SetDelegateKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mhub2/v1/msgs.proto",
}

func (m *MsgSendToExternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.BridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ExternalRecipient) > 0 {
		i -= len(m.ExternalRecipient)
		copy(dAtA[i:], m.ExternalRecipient)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalRecipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToExternalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToExternalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToExternalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToExternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToExternalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToExternalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToExternalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitExternalTxConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitExternalTxConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitExternalTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Confirmation != nil {
		{
			size, err := m.Confirmation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallTxConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallTxConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExternalSigner) > 0 {
		i -= len(m.ExternalSigner)
		copy(dAtA[i:], m.ExternalSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InvalidationScope) > 0 {
		i -= len(m.InvalidationScope)
		copy(dAtA[i:], m.InvalidationScope)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.InvalidationScope)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchTxConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTxConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExternalSigner) > 0 {
		i -= len(m.ExternalSigner)
		copy(dAtA[i:], m.ExternalSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExternalTokenId) > 0 {
		i -= len(m.ExternalTokenId)
		copy(dAtA[i:], m.ExternalTokenId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalTokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExternalSigner) > 0 {
		i -= len(m.ExternalSigner)
		copy(dAtA[i:], m.ExternalSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalSigner)))
		i--
		dAtA[i] = 0x12
	}
	if m.SignerSetNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SignerSetNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTxConfirmationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTxConfirmationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTxConfirmationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitExternalEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitExternalEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitExternalEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitExternalEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitExternalEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitExternalEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelegateKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EthSignature) > 0 {
		i -= len(m.EthSignature)
		copy(dAtA[i:], m.EthSignature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExternalAddress) > 0 {
		i -= len(m.ExternalAddress)
		copy(dAtA[i:], m.ExternalAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DelegateKeysSignMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeysSignMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateKeysSignMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendToHubEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendToHubEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendToHubEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExternalHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ExternalHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ExternalCoinId) > 0 {
		i -= len(m.ExternalCoinId)
		copy(dAtA[i:], m.ExternalCoinId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalCoinId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferToChainEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferToChainEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferToChainEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ExternalHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ExternalHeight))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ExternalReceiver) > 0 {
		i -= len(m.ExternalReceiver)
		copy(dAtA[i:], m.ExternalReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalReceiver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReceiverChainId) > 0 {
		i -= len(m.ReceiverChainId)
		copy(dAtA[i:], m.ReceiverChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ReceiverChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ExternalCoinId) > 0 {
		i -= len(m.ExternalCoinId)
		copy(dAtA[i:], m.ExternalCoinId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalCoinId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchExecutedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchExecutedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchExecutedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.FeePaid.Size()
		i -= size
		if _, err := m.FeePaid.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.ExternalHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ExternalHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExternalCoinId) > 0 {
		i -= len(m.ExternalCoinId)
		copy(dAtA[i:], m.ExternalCoinId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ExternalCoinId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallExecutedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallExecutedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallExecutedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.ExternalHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ExternalHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ReturnData) > 0 {
		i -= len(m.ReturnData)
		copy(dAtA[i:], m.ReturnData)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ReturnData)))
		i--
		dAtA[i] = 0x22
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.InvalidationScope) > 0 {
		i -= len(m.InvalidationScope)
		copy(dAtA[i:], m.InvalidationScope)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.InvalidationScope)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxExecutedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxExecutedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxExecutedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ExternalHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ExternalHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.SignerSetTxNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SignerSetTxNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendToExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ExternalRecipient)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendToExternalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMsgs(uint64(m.Id))
	}
	return n
}

func (m *MsgCancelSendToExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMsgs(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgCancelSendToExternalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestBatchTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgRequestBatchTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitExternalTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirmation != nil {
		l = m.Confirmation.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *ContractCallTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvalidationScope)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovMsgs(uint64(m.InvalidationNonce))
	}
	l = len(m.ExternalSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *BatchTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalTokenId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovMsgs(uint64(m.BatchNonce))
	}
	l = len(m.ExternalSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *SignerSetTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignerSetNonce != 0 {
		n += 1 + sovMsgs(uint64(m.SignerSetNonce))
	}
	l = len(m.ExternalSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSubmitTxConfirmationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitExternalEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSubmitExternalEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelegateKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ExternalAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthSignature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgDelegateKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DelegateKeysSignMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	return n
}

func (m *SendToHubEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	l = len(m.ExternalCoinId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ExternalHeight != 0 {
		n += 1 + sovMsgs(uint64(m.ExternalHeight))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *TransferToChainEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	l = len(m.ExternalCoinId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ReceiverChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ExternalReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ExternalHeight != 0 {
		n += 1 + sovMsgs(uint64(m.ExternalHeight))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *BatchExecutedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalCoinId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.ExternalHeight != 0 {
		n += 1 + sovMsgs(uint64(m.ExternalHeight))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovMsgs(uint64(m.BatchNonce))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.FeePaid.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *ContractCallExecutedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	l = len(m.InvalidationScope)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovMsgs(uint64(m.InvalidationNonce))
	}
	l = len(m.ReturnData)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ExternalHeight != 0 {
		n += 1 + sovMsgs(uint64(m.ExternalHeight))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *SignerSetTxExecutedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.SignerSetTxNonce != 0 {
		n += 1 + sovMsgs(uint64(m.SignerSetTxNonce))
	}
	if m.ExternalHeight != 0 {
		n += 1 + sovMsgs(uint64(m.ExternalHeight))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendToExternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToExternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToExternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToExternalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToExternalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToExternalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToExternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToExternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToExternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToExternalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToExternalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToExternalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitExternalTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitExternalTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitExternalTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirmation == nil {
				m.Confirmation = &types1.Any{}
			}
			if err := m.Confirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationScope", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationScope = append(m.InvalidationScope[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationScope == nil {
				m.InvalidationScope = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetNonce", wireType)
			}
			m.SignerSetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignerSetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTxConfirmationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTxConfirmationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTxConfirmationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitExternalEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitExternalEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitExternalEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &types1.Any{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitExternalEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitExternalEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitExternalEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSignature = append(m.EthSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EthSignature == nil {
				m.EthSignature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeysSignMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeysSignMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeysSignMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendToHubEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendToHubEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendToHubEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalCoinId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalCoinId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalHeight", wireType)
			}
			m.ExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferToChainEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferToChainEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferToChainEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalCoinId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalCoinId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalHeight", wireType)
			}
			m.ExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchExecutedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchExecutedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchExecutedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalCoinId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalCoinId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalHeight", wireType)
			}
			m.ExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallExecutedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallExecutedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallExecutedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationScope", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationScope = append(m.InvalidationScope[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationScope == nil {
				m.InvalidationScope = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnData = append(m.ReturnData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReturnData == nil {
				m.ReturnData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalHeight", wireType)
			}
			m.ExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxExecutedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxExecutedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxExecutedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxNonce", wireType)
			}
			m.SignerSetTxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignerSetTxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalHeight", wireType)
			}
			m.ExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &ExternalSigner{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
